/*
 * This file is generated by jOOQ.
*/
package swust.PdfVerify.pojo.po.mysql.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import swust.PdfVerify.pojo.po.mysql.Document;
import swust.PdfVerify.pojo.po.mysql.Indexes;
import swust.PdfVerify.pojo.po.mysql.Keys;
import swust.PdfVerify.pojo.po.mysql.tables.records.DocRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Doc extends TableImpl<DocRecord> {

    private static final long serialVersionUID = 1845769639;

    /**
     * The reference instance of <code>document.doc</code>
     */
    public static final Doc DOC = new Doc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocRecord> getRecordType() {
        return DocRecord.class;
    }

    /**
     * The column <code>document.doc.id</code>.
     */
    public final TableField<DocRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>document.doc.doc_web_path</code>.
     */
    public final TableField<DocRecord, String> DOC_WEB_PATH = createField("doc_web_path", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>document.doc.doc_id</code>.
     */
    public final TableField<DocRecord, Long> DOC_ID = createField("doc_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>document.doc.doc_local_path</code>.
     */
    public final TableField<DocRecord, String> DOC_LOCAL_PATH = createField("doc_local_path", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>document.doc</code> table reference
     */
    public Doc() {
        this(DSL.name("doc"), null);
    }

    /**
     * Create an aliased <code>document.doc</code> table reference
     */
    public Doc(String alias) {
        this(DSL.name(alias), DOC);
    }

    /**
     * Create an aliased <code>document.doc</code> table reference
     */
    public Doc(Name alias) {
        this(alias, DOC);
    }

    private Doc(Name alias, Table<DocRecord> aliased) {
        this(alias, aliased, null);
    }

    private Doc(Name alias, Table<DocRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Document.DOCUMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DOC_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DocRecord, Long> getIdentity() {
        return Keys.IDENTITY_DOC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DocRecord> getPrimaryKey() {
        return Keys.KEY_DOC_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DocRecord>> getKeys() {
        return Arrays.<UniqueKey<DocRecord>>asList(Keys.KEY_DOC_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Doc as(String alias) {
        return new Doc(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Doc as(Name alias) {
        return new Doc(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Doc rename(String name) {
        return new Doc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Doc rename(Name name) {
        return new Doc(name, null);
    }
}
